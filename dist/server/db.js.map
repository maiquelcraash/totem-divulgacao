{"version":3,"sources":["../../server/db.js"],"names":["pg","require","properties","Totem","config","user","DB_USER","database","DB_DATABASE","password","DB_PASSWORD","host","DB_HOST","port","DB_PORT","max","idleTimeoutMillis","pool","Pool","totemsManager","getTotems","totems","executeQuery","err","res","map","row","newTotem","code","description_id","situation","query","callback","rows","module","exports"],"mappings":"AAAA;;;;AAIA,MAAMA,KAAKC,QAAQ,IAAR,CAAX;AAAA,MACCC,aAAaD,QAAQ,cAAR,CADd;AAAA,MAECE,QAAQF,QAAQ,kBAAR,CAFT;;AAIA;AACA,MAAMG,SAAS;AACdC,OAAMH,WAAWI,OADH;AAEdC,WAAUL,WAAWM,WAFP;AAGdC,WAAUP,WAAWQ,WAHP;AAIdC,OAAMT,WAAWU,OAJH;AAKdC,OAAMX,WAAWY,OALH;AAMdC,MAAK,EANS;AAOdC,oBAAmB,KAPL,EAAf;;AAUA,MAAMC,OAAO,IAAIjB,GAAGkB,IAAP,CAAYd,MAAZ,CAAb;;AAEA,IAAIe,gBAAgB,MAAM;;AAEzB,KAAIC,YAAY,MAAM;AACrB,MAAIC,SAAS,EAAb;;AAEAC,eAAa,sBAAb,EAAqC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClD,OAAI,CAACD,GAAL,EAAU;AACTF,aAASG,IAAIC,GAAJ,CAASC,GAAD,IAAS;AACzB,YAAOvB,MAAMwB,QAAN,CAAeD,IAAIE,IAAnB,EAAyBF,IAAIG,cAA7B,EAA6CH,IAAII,SAAjD,CAAP;AACA,KAFQ,CAAT;AAGA;AACD,GAND;;AAQA,SAAOT,MAAP;AACA,EAZD;;AAcA,QAAO;AACND,aAAWA;AADL,EAAP;AAGA,CAnBD;;AAqBA,SAASE,YAAT,CAAsBS,KAAtB,EAA6BC,QAA7B,EAAuC;;AAEtCf,MAAKc,KAAL,CAAWA,KAAX,EAAkB,CAACR,GAAD,EAAMC,GAAN,KAAc;AAC/B,MAAID,GAAJ,EAAS;AACR,UAAOS,SAAST,GAAT,EAAc,IAAd,CAAP;AACA;AACD,SAAOS,SAAS,IAAT,EAAeR,IAAIS,IAAnB,CAAP;AACA,EALD;AAMA;;AAEDC,OAAOC,OAAP,GAAiBhB,eAAjB","file":"db.js","sourcesContent":["/**\n * Created by maiquel on 24/03/17.\n */\n\nconst pg = require('pg'),\n\tproperties = require('./properties'),\n\tTotem = require('./entities/totem');\n\n/* #### Configure POSTGRES #### */\nconst config = {\n\tuser: properties.DB_USER,\n\tdatabase: properties.DB_DATABASE,\n\tpassword: properties.DB_PASSWORD,\n\thost: properties.DB_HOST,\n\tport: properties.DB_PORT,\n\tmax: 10,\n\tidleTimeoutMillis: 30000, // how long a client is allowed to remain idle before being closed\n};\n\nconst pool = new pg.Pool(config);\n\nlet totemsManager = () => {\n\n\tlet getTotems = () => {\n\t\tlet totems = [];\n\n\t\texecuteQuery('SELECT * FROM totems', (err, res) => {\n\t\t\tif (!err) {\n\t\t\t\ttotems = res.map((row) => {\n\t\t\t\t\treturn Totem.newTotem(row.code, row.description_id, row.situation);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn totems;\n\t};\n\n\treturn {\n\t\tgetTotems: getTotems\n\t}\n};\n\nfunction executeQuery(query, callback) {\n\n\tpool.query(query, (err, res) => {\n\t\tif (err) {\n\t\t\treturn callback(err, null);\n\t\t}\n\t\treturn callback(null, res.rows);\n\t});\n}\n\nmodule.exports = totemsManager();"]}